import { autorun, reaction, makeAutoObservable, action as action$1, computed as computed$1, observable as observable$1 } from 'mobx';
import { Directive, TemplateRef, ViewContainerRef, Input, ɵɵdefineInjectable, ɵɵinject, Injectable, NgModule } from '@angular/core';
import { NavigationEnd, Router, ActivatedRoute } from '@angular/router';
import { filter } from 'rxjs/operators';

// import { mobxAngularDebug } from '../utils/mobx-angular-debug';
class MobxAutorunDirective {
    constructor(templateRef, viewContainer) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.templateBindings = {};
        this.allAutorunOptions = [
            'delay',
            'scheduler',
            'requiresObservable',
            'name',
            'onError'
        ];
    }
    ngOnInit() {
        this.view = this.viewContainer.createEmbeddedView(this.templateRef);
        if (this.dispose) {
            this.dispose();
        }
        if (this.shouldDetach()) {
            this.view.detach();
        }
        this.autoDetect(this.view);
        // mobxAngularDebug(this.view, this.dispose);
    }
    shouldDetach() {
        return this.mobxAutorun && this.mobxAutorun.detach;
    }
    autoDetect(view) {
        const opts = this.getAutorunOptions();
        this.dispose = autorun(() => view.detectChanges(), opts);
    }
    getAutorunOptions() {
        return Object.keys(this.mobxAutorun || {}).reduce((opts, current) => {
            if (this.allAutorunOptions.includes(current)) {
                opts[current] = this.mobxAutorun[current];
            }
            return opts;
        }, {});
    }
    ngOnDestroy() {
        if (this.dispose) {
            this.dispose();
        }
    }
}
MobxAutorunDirective.decorators = [
    { type: Directive, args: [{ selector: '[mobxAutorun]' },] }
];
MobxAutorunDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
MobxAutorunDirective.propDecorators = {
    mobxAutorun: [{ type: Input }]
};

class MobxReactionDirective extends MobxAutorunDirective {
    constructor(templateRef, viewContainer) {
        super(templateRef, viewContainer);
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
    }
    autoDetect(view) {
        const opts = Object.assign({ fireImmediately: true }, this.mobxReactionOptions);
        this.dispose = reaction(this.mobxReaction, () => {
            view.detectChanges();
        }, opts);
    }
}
MobxReactionDirective.decorators = [
    { type: Directive, args: [{ selector: '[mobxReaction]' },] }
];
MobxReactionDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
MobxReactionDirective.propDecorators = {
    mobxReaction: [{ type: Input }],
    mobxReactionOptions: [{ type: Input }]
};

class RouterStore {
    constructor(router, activatedRoute) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.url = '';
        this.routeSnapshot = null;
        makeAutoObservable(this);
        router.events
            .pipe(filter((event) => event instanceof NavigationEnd))
            .subscribe((e) => this.routeListener(e));
    }
    routeListener(event) {
        this.routeSnapshot = this.activatedRoute.snapshot;
        this.url = event.urlAfterRedirects;
    }
}
RouterStore.ɵprov = ɵɵdefineInjectable({ factory: function RouterStore_Factory() { return new RouterStore(ɵɵinject(Router), ɵɵinject(ActivatedRoute)); }, token: RouterStore, providedIn: "root" });
RouterStore.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
RouterStore.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute }
];

const DIRECTIVES = [MobxAutorunDirective, MobxReactionDirective];
class MobxAngularModule {
}
MobxAngularModule.decorators = [
    { type: NgModule, args: [{
                declarations: DIRECTIVES,
                exports: DIRECTIVES
            },] }
];

/*
 * Public API Surface of mobx-angular
 */
// Re-export mobx operators to be able to use inside components with AOT:
function actionInternal(...args) {
    return action$1(...args);
}
const action = Object.assign(actionInternal, action$1);
function computedInternal(...args) {
    return computed$1(...args);
}
const computed = Object.assign(computedInternal, computed$1);
function observableInternal(...args) {
    return observable$1(...args);
}
const observable = Object.assign(observableInternal, observable$1);

/**
 * Generated bundle index. Do not edit.
 */

export { MobxAngularModule, MobxAutorunDirective, MobxReactionDirective, RouterStore, action, actionInternal, computed, observable };
//# sourceMappingURL=mobx-angular.js.map
