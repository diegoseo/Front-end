{"ast":null,"code":"import _asyncToGenerator from \"/home/seo/Desktop/Parcial_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { mainEndpoint } from './utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(_http) {\n    this._http = _http;\n    this.urlApi = mainEndpoint + '/stock-pwfe/persona';\n    this.isLogged = true;\n    this.user = {\n      usuarioLogin: 'usuario1'\n    };\n  }\n\n  getAllUsers() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        lista\n      } = yield _this._http.get(_this.urlApi).toPromise();\n      return lista;\n    })();\n  }\n\n  existUser(username) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const user = (yield _this2.getAllUsers()).filter(user => user.usuarioLogin === username)[0];\n      _this2.user = user || _this2.user;\n      return !!user;\n    })();\n  }\n\n  login(username, password) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.isLogged = yield _this3.existUser(username);\n    })();\n  }\n\n}\n\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/seo/Desktop/Parcial_front/src/app/services/account.service.ts"],"names":[],"mappings":";AAEA,SAAQ,YAAR,QAA2B,SAA3B;;;AAIA,OAAM,MAAO,cAAP,CAAqB;AAKzB,EAAA,WAAA,CAAoB,KAApB,EAAqC;AAAjB,SAAA,KAAA,GAAA,KAAA;AAJZ,SAAA,MAAA,GAAS,YAAY,GAAG,qBAAxB;AACD,SAAA,QAAA,GAAoB,IAApB;AACA,SAAA,IAAA,GAAY;AAAE,MAAA,YAAY,EAAE;AAAhB,KAAZ;AAEmC;;AAE7B,EAAA,WAAW,GAAA;AAAA;;AAAA;AACtB,YAAM;AAAE,QAAA;AAAF,gBAAkB,KAAI,CAAC,KAAL,CAAW,GAAX,CAAoB,KAAI,CAAC,MAAzB,EAAiC,SAAjC,EAAxB;AACA,aAAO,KAAP;AAFsB;AAGvB;;AAEY,EAAA,SAAS,CAAC,QAAD,EAAiB;AAAA;;AAAA;AACrC,YAAM,IAAI,GAAG,OAAO,MAAI,CAAC,WAAL,EAAP,EACV,MADU,CACH,IAAI,IAAI,IAAI,CAAC,YAAL,KAAsB,QAD3B,EACqC,CADrC,CAAb;AAEA,MAAA,MAAI,CAAC,IAAL,GAAY,IAAI,IAAI,MAAI,CAAC,IAAzB;AACA,aAAO,CAAC,CAAC,IAAT;AAJqC;AAKtC;;AAEY,EAAA,KAAK,CAAC,QAAD,EAAmB,QAAnB,EAAmC;AAAA;;AAAA;AACnD,MAAA,MAAI,CAAC,QAAL,SAAsB,MAAI,CAAC,SAAL,CAAe,QAAf,CAAtB;AADmD;AAEpD;;AArBwB;;;mBAAd,c,EAAc,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAd,c;AAAc,EAAA,OAAA,EAAd,cAAc,CAAA,I;AAAA,EAAA,UAAA,EAFb","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {mainEndpoint} from './utils';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  private urlApi = mainEndpoint + '/stock-pwfe/persona';\n  public isLogged: boolean = true;\n  public user: any = { usuarioLogin: 'usuario1' };\n\n  constructor(private _http: HttpClient) { }\n\n  public async getAllUsers(): Promise<any[]> {\n    const { lista } = await this._http.get<any>(this.urlApi).toPromise();\n    return lista;\n  }\n\n  public async existUser(username: string): Promise<boolean> {\n    const user = (await this.getAllUsers())\n      .filter(user => user.usuarioLogin === username)[0];\n    this.user = user || this.user;\n    return !!user;\n  }\n\n  public async login(username: string, password: string) {\n    this.isLogged = await this.existUser(username);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}