{"ast":null,"code":"import _asyncToGenerator from \"/home/seo/Desktop/primer-parcial-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { mainEndpoint } from './utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServiceService {\n  constructor(_http) {\n    this._http = _http;\n    this.urlApiService = mainEndpoint + '/stock-pwfe/presentacionProducto';\n    this.urlApiProduct = mainEndpoint + '/stock-pwfe/producto';\n    this.services = [];\n    this.products = [];\n  }\n\n  newServiceFromServer(service) {\n    return {\n      id: service.idPresentacionProducto,\n      code: service.codigo,\n      flag: service.flagServicio,\n      product: service.idProducto,\n      name: service.nombre,\n      price: service.existenciaProducto.precioVenta\n    };\n  }\n\n  newProductFromServer(product) {\n    return {\n      id: product.idProducto,\n      name: product.descripcion,\n      subCategory: {\n        id: product.idTipoProducto.idTipoProducto,\n        name: product.idTipoProducto.descripcion,\n        visible: product.idTipoProducto.flagVisible === 'S'\n      },\n      category: {\n        id: product.idTipoProducto.idCategoria.idCategoria,\n        name: product.idTipoProducto.idCategoria.descripcion,\n        visible: product.idTipoProducto.idCategoria.flagVisible === 'S'\n      }\n    };\n  }\n\n  serverFormatService(service) {\n    return {\n      codigo: service.code,\n      flagServicio: service.flag || \"S\",\n      idProducto: {\n        idProducto: service.product.id\n      },\n      nombre: service.name,\n      existenciaProducto: {\n        precioVenta: service.price\n      }\n    };\n  }\n\n  editService(service) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this._http.put(_this.urlApiService, _this.serverFormatService(service)).toPromise();\n    })();\n  }\n\n  getAllServices() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // const { lista } = await this._http.get<any>(this.urlApiService).toPromise();\n      const reqObj = {\n        \"nombre\": \"b\"\n      }; //USAMOS NOMBRE POR MIENTRAS POR QUE NO ANDA EL GET ALL\n\n      const endpoint = `${_this2.urlApiService}?like=S&ejemplo=${encodeURIComponent(JSON.stringify(reqObj))}`;\n      const {\n        lista\n      } = yield _this2._http.get(endpoint).toPromise();\n      const services = lista.map(s => _this2.newServiceFromServer(s));\n      _this2.services = services;\n      return services;\n    })();\n  }\n\n  getAllProducts() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        lista\n      } = yield _this3._http.get(_this3.urlApiProduct).toPromise();\n      const products = lista.map(p => _this3.newProductFromServer(p));\n      _this3.products = products;\n      return products;\n    })();\n  }\n\n  createService(service) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this4._http.put(_this4.urlApiService, _this4.serverFormatService(service)).toPromise();\n      console.log('service created result:', result);\n      return _this4.newServiceFromServer(result);\n    })();\n  }\n\n}\n\nServiceService.ɵfac = function ServiceService_Factory(t) {\n  return new (t || ServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServiceService,\n  factory: ServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/seo/Desktop/primer-parcial-frontend/src/app/services/service.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { mainEndpoint } from './utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceService {\n\n  private urlApiService = mainEndpoint + '/stock-pwfe/presentacionProducto';\n  private urlApiProduct = mainEndpoint + '/stock-pwfe/producto';\n  public services: Array<any> = [];\n  public products: Array<any> = [];\n\n  constructor(private _http: HttpClient) { }\n\n  newServiceFromServer(service: any): any {\n    return {\n      id: service.idPresentacionProducto,\n      code: service.codigo,\n      flag: service.flagServicio,\n      product: service.idProducto,\n      name: service.nombre,\n      price: service.existenciaProducto.precioVenta\n    }\n  }\n\n  newProductFromServer(product: any): any {\n    return {\n      id: product.idProducto,\n      name: product.descripcion,\n      subCategory: {\n        id: product.idTipoProducto.idTipoProducto,\n        name: product.idTipoProducto.descripcion,\n        visible: product.idTipoProducto.flagVisible === 'S'\n      },\n      category: {\n        id: product.idTipoProducto.idCategoria.idCategoria,\n        name: product.idTipoProducto.idCategoria.descripcion,\n        visible: product.idTipoProducto.idCategoria.flagVisible === 'S'\n      }\n    }\n  }\n\n  serverFormatService(service: any): any {\n    return {\n      codigo: service.code,\n      flagServicio: service.flag || \"S\",\n      idProducto: {\n        idProducto: service.product.id\n      },\n      nombre: service.name,\n      existenciaProducto: {\n        precioVenta: service.price\n      }\n    }\n  }\n\n  public async editService(service: any): Promise<any> {\n    await this._http.put<any>(\n      this.urlApiService,\n      this.serverFormatService(service)).toPromise();\n  }\n\n  public async getAllServices(): Promise<any[]> {\n    // const { lista } = await this._http.get<any>(this.urlApiService).toPromise();\n    const reqObj = {\"nombre\":\"b\"};//USAMOS NOMBRE POR MIENTRAS POR QUE NO ANDA EL GET ALL\n    const endpoint = `${this.urlApiService}?like=S&ejemplo=${encodeURIComponent(JSON.stringify(reqObj))}`;\n    const { lista } = await this._http.get<any>(endpoint).toPromise();\n    const services = lista.map((s: any) => this.newServiceFromServer(s));\n    this.services = services;\n    return services;\n  }\n\n  public async getAllProducts(): Promise<any[]> {\n    const { lista } = await this._http.get<any>(this.urlApiProduct).toPromise();\n    const products = lista.map((p: any) => this.newProductFromServer(p));\n    this.products = products;\n    return products;\n  }\n\n  public async createService(service: any): Promise<any> {\n    const result = await this._http.put<any>(\n        this.urlApiService,\n        this.serverFormatService(service))\n      .toPromise();\n    console.log('service created result:', result);\n    return this.newServiceFromServer(result);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}