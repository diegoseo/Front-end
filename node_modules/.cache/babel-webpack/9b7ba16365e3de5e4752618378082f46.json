{"ast":null,"code":"import _asyncToGenerator from \"/home/seo/Desktop/Parcial_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { mainEndpoint } from './utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PatientService {\n  constructor(_http) {\n    this._http = _http;\n    this.urlApiPatient = mainEndpoint + '/stock-pwfe/persona';\n    this.patients = [];\n  }\n\n  newPatientFromServer(p) {\n    return {\n      id: p.idPersona,\n      name: p.nombre,\n      lastName: p.apellido,\n      fullName: p.nombreCompleto,\n      email: p.email,\n      phone: p.telefono,\n      document: p.ruc || p.cedula,\n      type: p.tipoPersona,\n      birthday: p.fechaNacimiento\n    };\n  }\n\n  newPatientToSend(p) {\n    return {\n      idPersona: p.id,\n      nombre: p.name,\n      apellido: p.lastName,\n      nombreCompleto: p.fullName,\n      email: p.email,\n      telefono: p.phone,\n      ruc: p.document,\n      cedula: p.document,\n      tipoPersona: p.type,\n      fechaNacimiento: p.birthday + ' 00:00:01.1'\n    };\n  }\n\n  getAllPatients() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        lista\n      } = yield _this._http.get(_this.urlApiPatient).toPromise();\n      const newPatients = lista.map(p => _this.newPatientFromServer(p));\n      _this.patients = newPatients;\n      return newPatients;\n    })();\n  }\n\n  createPatient(patient) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this2._http.post(_this2.urlApiPatient, _this2.newPatientToSend(patient)).toPromise();\n      return _this2.newPatientFromServer(result);\n    })();\n  }\n\n  editPatient(patient) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3._http.put(_this3.urlApiPatient, _this3.newPatientToSend(patient)).toPromise();\n    })();\n  }\n\n}\n\nPatientService.ɵfac = function PatientService_Factory(t) {\n  return new (t || PatientService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nPatientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PatientService,\n  factory: PatientService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/seo/Desktop/Parcial_front/src/app/services/patient.service.ts"],"names":[],"mappings":";AAEA,SAAS,YAAT,QAA6B,SAA7B;;;AAKA,OAAM,MAAO,cAAP,CAAqB;AAKzB,EAAA,WAAA,CAAoB,KAApB,EAAqC;AAAjB,SAAA,KAAA,GAAA,KAAA;AAHZ,SAAA,aAAA,GAAgB,YAAY,GAAG,qBAA/B;AACD,SAAA,QAAA,GAAuB,EAAvB;AAEmC;;AAElC,EAAA,oBAAoB,CAAC,CAAD,EAAO;AACjC,WAAO;AACL,MAAA,EAAE,EAAE,CAAC,CAAC,SADD;AAEL,MAAA,IAAI,EAAE,CAAC,CAAC,MAFH;AAGL,MAAA,QAAQ,EAAE,CAAC,CAAC,QAHP;AAIL,MAAA,QAAQ,EAAE,CAAC,CAAC,cAJP;AAKL,MAAA,KAAK,EAAE,CAAC,CAAC,KALJ;AAML,MAAA,KAAK,EAAE,CAAC,CAAC,QANJ;AAOL,MAAA,QAAQ,EAAE,CAAC,CAAC,GAAF,IAAS,CAAC,CAAC,MAPhB;AAQL,MAAA,IAAI,EAAE,CAAC,CAAC,WARH;AASL,MAAA,QAAQ,EAAE,CAAC,CAAC;AATP,KAAP;AAWD;;AAEO,EAAA,gBAAgB,CAAC,CAAD,EAAO;AAC7B,WAAO;AACL,MAAA,SAAS,EAAE,CAAC,CAAC,EADR;AAEL,MAAA,MAAM,EAAE,CAAC,CAAC,IAFL;AAGL,MAAA,QAAQ,EAAE,CAAC,CAAC,QAHP;AAIL,MAAA,cAAc,EAAE,CAAC,CAAC,QAJb;AAKL,MAAA,KAAK,EAAE,CAAC,CAAC,KALJ;AAML,MAAA,QAAQ,EAAE,CAAC,CAAC,KANP;AAOL,MAAA,GAAG,EAAE,CAAC,CAAC,QAPF;AAQL,MAAA,MAAM,EAAC,CAAC,CAAC,QARJ;AASL,MAAA,WAAW,EAAE,CAAC,CAAC,IATV;AAUL,MAAA,eAAe,EAAE,CAAC,CAAC,QAAF,GAAa;AAVzB,KAAP;AAYD;;AAEY,EAAA,cAAc,GAAA;AAAA;;AAAA;AACzB,YAAM;AAAE,QAAA;AAAF,gBAAkB,KAAI,CAAC,KAAL,CAAW,GAAX,CAAoB,KAAI,CAAC,aAAzB,EAAwC,SAAxC,EAAxB;AACA,YAAM,WAAW,GAAG,KAAK,CAAC,GAAN,CAAW,CAAD,IAAY,KAAI,CAAC,oBAAL,CAA0B,CAA1B,CAAtB,CAApB;AACA,MAAA,KAAI,CAAC,QAAL,GAAgB,WAAhB;AACA,aAAO,WAAP;AAJyB;AAK1B;;AAEY,EAAA,aAAa,CAAC,OAAD,EAAa;AAAA;;AAAA;AACrC,YAAM,MAAM,SAAS,MAAI,CAAC,KAAL,CAAW,IAAX,CACnB,MAAI,CAAC,aADc,EAEnB,MAAI,CAAC,gBAAL,CAAsB,OAAtB,CAFmB,EAGnB,SAHmB,EAArB;AAIA,aAAO,MAAI,CAAC,oBAAL,CAA0B,MAA1B,CAAP;AALqC;AAMtC;;AAEY,EAAA,WAAW,CAAC,OAAD,EAAa;AAAA;;AAAA;AACnC,YAAM,MAAI,CAAC,KAAL,CAAW,GAAX,CACJ,MAAI,CAAC,aADD,EAEJ,MAAI,CAAC,gBAAL,CAAsB,OAAtB,CAFI,EAE4B,SAF5B,EAAN;AADmC;AAIpC;;AAvDwB;;;mBAAd,c,EAAc,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAd,c;AAAc,EAAA,OAAA,EAAd,cAAc,CAAA,I;AAAA,EAAA,UAAA,EAFb","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { mainEndpoint } from './utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n\n  private urlApiPatient = mainEndpoint + '/stock-pwfe/persona';\n  public patients: Array<any> = [];\n\n  constructor(private _http: HttpClient) { }\n\n  private newPatientFromServer(p: any) {\n    return {\n      id: p.idPersona,\n      name: p.nombre,\n      lastName: p.apellido,\n      fullName: p.nombreCompleto,\n      email: p.email,\n      phone: p.telefono,\n      document: p.ruc || p.cedula,\n      type: p.tipoPersona,\n      birthday: p.fechaNacimiento\n    }\n  }\n\n  private newPatientToSend(p: any): any {\n    return {\n      idPersona: p.id,\n      nombre: p.name,\n      apellido: p.lastName,\n      nombreCompleto: p.fullName,\n      email: p.email,\n      telefono: p.phone,\n      ruc: p.document,\n      cedula:p.document,\n      tipoPersona: p.type,\n      fechaNacimiento: p.birthday + ' 00:00:01.1'\n    }\n  }\n\n  public async getAllPatients(): Promise<any[]> {\n    const { lista } = await this._http.get<any>(this.urlApiPatient).toPromise();\n    const newPatients = lista.map((p: any) => this.newPatientFromServer(p));\n    this.patients = newPatients;\n    return newPatients;\n  }\n\n  public async createPatient(patient: any): Promise<any> {\n    const result = await this._http.post<any>(\n      this.urlApiPatient,\n      this.newPatientToSend(patient)\n    ).toPromise();\n    return this.newPatientFromServer(result);\n  }\n\n  public async editPatient(patient: any): Promise<any> {\n    await this._http.put<any>(\n      this.urlApiPatient,\n      this.newPatientToSend(patient)).toPromise();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}