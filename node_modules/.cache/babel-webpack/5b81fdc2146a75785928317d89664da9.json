{"ast":null,"code":"import _asyncToGenerator from \"/home/seo/Desktop/primer-parcial-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { getFechaForQuery, mainEndpoint } from './utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FichaService {\n  constructor(_http) {\n    this._http = _http;\n    this.urlApi = mainEndpoint + '/stock-pwfe/fichaClinica';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'usuario': 'usuario2'\n      })\n    };\n  }\n\n  createFicha(motivoConsulta, diagnostico, idDoctor, idCliente, idSubcategoria, observacion = '') {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // - Para registrar una ficha clínica (al cargar la pantalla de registro de ficha el cliente puede\n      //     preseleccionarse si existe una reserva de turno, el campo de observación es opcional, la fecha\n      //     se carga en el backend automáticamente):\n      const requestObj = {\n        motivoConsulta,\n        diagnostico,\n        observacion,\n        \"idEmpleado\": {\n          \"idPersona\": idDoctor\n        },\n        \"idCliente\": {\n          \"idPersona\": idCliente\n        },\n        \"idTipoProducto\": {\n          \"idTipoProducto\": idSubcategoria\n        }\n      };\n      const result = yield _this._http.post(_this.urlApi, requestObj, _this.httpOptions).toPromise();\n      return result;\n    })();\n  }\n\n  updateFicha(idFichaClinica, observacion = '') {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // - Para modificar la observación de una ficha (ningún otro campo se puede modificar):\n      const requestObj = {\n        idFichaClinica,\n        observacion\n      };\n      const result = yield _this2._http.put(_this2.urlApi, requestObj, _this2.httpOptions).toPromise();\n      return result;\n    })();\n  }\n\n  getFichaByDate(fechaDesde, fechaHasta) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const fechaDesdeCadena = getFechaForQuery(fechaDesde);\n      const fechaHastaCadena = getFechaForQuery(fechaHasta);\n      const requestObj = {\n        fechaDesdeCadena,\n        fechaHastaCadena\n      };\n      const urlApi = `${_this3.urlApi}?ejemplo=${encodeURIComponent(JSON.stringify(requestObj))}`;\n      const {\n        lista\n      } = yield _this3._http.get(urlApi).toPromise();\n      return lista;\n    })();\n  }\n\n  getFichaByPaciente(idPaciente) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // - Para obtener las fichas del paciente con id \n      const requestObj = {\n        idCliente: {\n          idPersona: idPaciente\n        }\n      };\n      const urlApi = `${_this4.urlApi}?ejemplo=${encodeURIComponent(JSON.stringify(requestObj))}`;\n      const {\n        lista\n      } = yield _this4._http.get(urlApi).toPromise();\n      return lista;\n    })();\n  }\n\n  getFichaByDoctor(idDoctor) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      // - Para obtener las fichas registradas por el fisioterapeuta con id\n      const requestObj = {\n        idEmpleado: {\n          idPersona: idDoctor\n        }\n      };\n      const urlApi = `${_this5.urlApi}?ejemplo=${encodeURIComponent(JSON.stringify(requestObj))}`;\n      const {\n        lista\n      } = yield _this5._http.get(urlApi).toPromise();\n      return lista;\n    })();\n  }\n\n  getFichaBySubcategoria(idTipoProducto) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      // - Para obtener de la subcategoría\n      const requestObj = {\n        idTipoProducto: {\n          idTipoProducto\n        }\n      };\n      const urlApi = `${_this6.urlApi}?ejemplo=${encodeURIComponent(JSON.stringify(requestObj))}`;\n      const {\n        lista\n      } = yield _this6._http.get(urlApi).toPromise();\n      return lista;\n    })();\n  }\n\n  getAllFichas() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        lista\n      } = yield _this7._http.get(_this7.urlApi).toPromise();\n      return lista;\n    })();\n  }\n\n}\n\nFichaService.ɵfac = function FichaService_Factory(t) {\n  return new (t || FichaService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nFichaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FichaService,\n  factory: FichaService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/seo/Desktop/primer-parcial-frontend/src/app/services/ficha.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport {getFechaForQuery, mainEndpoint} from './utils';\n@Injectable({\n    providedIn: 'root'\n})\nexport class FichaService {\n    private urlApi = mainEndpoint + '/stock-pwfe/fichaClinica';\n    private httpOptions: object  = {\n        headers: new HttpHeaders({\n        'Content-Type':  'application/json',\n        'usuario': 'usuario2'\n        })\n    };\n    constructor(private _http: HttpClient) { }\n    public async createFicha(motivoConsulta:string, diagnostico:string, idDoctor:number, idCliente:number, idSubcategoria:number, observacion: string = ''): Promise<any> {\n        // - Para registrar una ficha clínica (al cargar la pantalla de registro de ficha el cliente puede\n        //     preseleccionarse si existe una reserva de turno, el campo de observación es opcional, la fecha\n        //     se carga en el backend automáticamente):\n        const requestObj:Object ={\n            motivoConsulta, diagnostico, observacion,\n            \"idEmpleado\":{\n                \"idPersona\":idDoctor\n            },\n            \"idCliente\":{\n                \"idPersona\":idCliente\n            },\n            \"idTipoProducto\": {\n                \"idTipoProducto\":idSubcategoria\n            }\n        };\n        const result = await this._http.post<any>(this.urlApi, requestObj, this.httpOptions).toPromise();\n        return result;\n    }\n    public async updateFicha(idFichaClinica:number, observacion:string=''): Promise<any> {\n        // - Para modificar la observación de una ficha (ningún otro campo se puede modificar):\n        const requestObj: Object = { idFichaClinica, observacion}\n        const result = await this._http.put<any>(this.urlApi, requestObj, this.httpOptions).toPromise();\n        return result;\n    }\n    public async getFichaByDate( fechaDesde:Date,fechaHasta:Date ): Promise<any> {\n        const fechaDesdeCadena: string = getFechaForQuery(fechaDesde);\n        const fechaHastaCadena: string = getFechaForQuery(fechaHasta);\n\n        const requestObj: Object = { fechaDesdeCadena, fechaHastaCadena}\n\n        const urlApi:string = `${this.urlApi}?ejemplo=${encodeURIComponent(JSON.stringify(requestObj))}`;\n        const { lista } = await this._http.get<any>(urlApi).toPromise();\n        return lista;\n    }\n    public async getFichaByPaciente( idPaciente:number ): Promise<any> {\n        // - Para obtener las fichas del paciente con id \n        const requestObj: Object = { idCliente:{\n            idPersona: idPaciente\n        }}\n        const urlApi:string = `${this.urlApi}?ejemplo=${encodeURIComponent(JSON.stringify(requestObj))}`;\n        const { lista } = await this._http.get<any>(urlApi).toPromise();\n        return lista;\n    }\n    public async getFichaByDoctor( idDoctor:number ): Promise<any> {\n        // - Para obtener las fichas registradas por el fisioterapeuta con id\n        const requestObj: Object = { idEmpleado:{\n            idPersona: idDoctor\n        }}\n        const urlApi:string = `${this.urlApi}?ejemplo=${encodeURIComponent(JSON.stringify(requestObj))}`;\n        const { lista } = await this._http.get<any>(urlApi).toPromise();\n        return lista;\n    }\n    public async getFichaBySubcategoria( idTipoProducto:number ): Promise<any> {\n        // - Para obtener de la subcategoría\n        const requestObj: Object = { idTipoProducto:{\n            idTipoProducto\n        }}\n        const urlApi:string = `${this.urlApi}?ejemplo=${encodeURIComponent(JSON.stringify(requestObj))}`;\n        const { lista } = await this._http.get<any>(urlApi).toPromise();\n        return lista;\n    }\n    public async getAllFichas(): Promise<any> {\n        const { lista } = await this._http.get<any>(this.urlApi).toPromise();\n        return lista;\n    }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}