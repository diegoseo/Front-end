{"ast":null,"code":"import _asyncToGenerator from \"/home/seo/Desktop/Parcial_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { mainEndpoint } from './utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DoctorService {\n  constructor(_http) {\n    this._http = _http;\n    this.urlApiDoctor = mainEndpoint + '/stock-pwfe/personaHorarioAgenda';\n    this.urlApiFisios = mainEndpoint + '/stock-pwfe/persona';\n    this.doctors = [];\n  }\n\n  newDoctorFromServer(d) {\n    const p = d.idEmpleado;\n    return {\n      id: p.idPersona,\n      name: p.nombre,\n      lastName: p.apellido,\n      fullName: p.nombreCompleto,\n      email: p.email,\n      phone: p.telefono,\n      document: p.ruc || p.cedula,\n      type: p.tipoPersona,\n      birthday: p.fechaNacimiento,\n      calendar: {\n        day: d.dia,\n        startHour: d.horaAperturaCadena,\n        endHour: d.horaCierreCadena,\n        interval: d.intervaloMinutos\n      }\n    };\n  }\n\n  newDoctorToSend(p) {\n    return {\n      idPersona: p.id,\n      nombre: p.name,\n      apellido: p.lastName,\n      nombreCompleto: p.fullName,\n      email: p.email,\n      telefono: p.phone,\n      ruc: p.document,\n      cedula: p.document,\n      tipoPersona: p.type,\n      fechaNacimiento: p.birthday + ' 00:00:01.1'\n    };\n  }\n\n  getAllFisios() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const requestObj = {\n        soloUsuariosDelSistema: true\n      };\n      const url = `${_this.urlApiFisios}?ejemplo=${encodeURIComponent(JSON.stringify(requestObj))}`;\n      const {\n        lista\n      } = yield _this._http.get(url).toPromise();\n      return lista;\n    })();\n  }\n\n  getAllDoctors() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        lista\n      } = yield _this2._http.get(_this2.urlApiDoctor).toPromise();\n      let newDoctors = lista.map(d => _this2.newDoctorFromServer(d)).reduce((result, d) => {\n        return Object.assign(Object.assign({}, result), {\n          [d.id]: Object.assign(Object.assign({}, d), {\n            calendars: ((result[d.id] || {}).calendars || []).concat(d.calendar)\n          })\n        });\n      }, {});\n      newDoctors = Object.values(newDoctors);\n      console.log('doctors:', newDoctors);\n      _this2.doctors = newDoctors;\n      return newDoctors;\n    })();\n  }\n\n  createDoctor(doctor) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this3._http.post(_this3.urlApiDoctor, _this3.newDoctorToSend(doctor)).toPromise();\n      return _this3.newDoctorFromServer(result);\n    })();\n  }\n\n  editDoctor(doctor) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this4._http.put(_this4.urlApiDoctor, _this4.newDoctorToSend(doctor)).toPromise();\n    })();\n  }\n\n}\n\nDoctorService.ɵfac = function DoctorService_Factory(t) {\n  return new (t || DoctorService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nDoctorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DoctorService,\n  factory: DoctorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/seo/Desktop/Parcial_front/src/app/services/doctor.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { mainEndpoint } from './utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DoctorService {\n\n  private urlApiDoctor = mainEndpoint + '/stock-pwfe/personaHorarioAgenda';\n  private urlApiFisios = mainEndpoint + '/stock-pwfe/persona';\n  public doctors: Array<any> = [];\n\n  constructor(private _http: HttpClient) { }\n\n  private newDoctorFromServer(d: any) {\n    const p = d.idEmpleado;\n    return {\n      id: p.idPersona,\n      name: p.nombre,\n      lastName: p.apellido,\n      fullName: p.nombreCompleto,\n      email: p.email,\n      phone: p.telefono,\n      document: p.ruc || p.cedula,\n      type: p.tipoPersona,\n      birthday: p.fechaNacimiento,\n      calendar: {\n        day: d.dia,\n        startHour: d.horaAperturaCadena,\n        endHour: d.horaCierreCadena,\n        interval: d.intervaloMinutos\n      }\n    }\n  }\n\n  private newDoctorToSend(p: any): any {\n    return {\n      idPersona: p.id,\n      nombre: p.name,\n      apellido: p.lastName,\n      nombreCompleto: p.fullName,\n      email: p.email,\n      telefono: p.phone,\n      ruc: p.document,\n      cedula:p.document,\n      tipoPersona: p.type,\n      fechaNacimiento: p.birthday + ' 00:00:01.1'\n    }\n  }\n  public async getAllFisios(): Promise<any[]>{\n    const requestObj: Object = {\n      soloUsuariosDelSistema: true\n    };\n    const url:string = `${this.urlApiFisios}?ejemplo=${encodeURIComponent(JSON.stringify(requestObj))}`;\n    const {lista} = await this._http.get<any>(url).toPromise();\n    return lista;\n  }\n  public async getAllDoctors(): Promise<any[]> {\n    const { lista } = await this._http.get<any>(this.urlApiDoctor).toPromise();\n    let newDoctors = lista\n      .map((d: any) => this.newDoctorFromServer(d))\n      .reduce((result: any, d: any) => {\n        return {\n          ...result,\n          [d.id]: {\n            ...d,\n            calendars: ((result[d.id] || {}).calendars || []).concat(d.calendar)\n          }\n        }\n      }, {});\n    newDoctors = Object.values(newDoctors);\n    console.log('doctors:', newDoctors);\n    this.doctors = newDoctors;\n    return newDoctors;\n  }\n\n  public async createDoctor(doctor: any): Promise<any> {\n    const result = await this._http.post<any>(\n      this.urlApiDoctor,\n      this.newDoctorToSend(doctor)\n    ).toPromise();\n    return this.newDoctorFromServer(result);\n  }\n\n  public async editDoctor(doctor: any): Promise<any> {\n    await this._http.put<any>(\n      this.urlApiDoctor,\n      this.newDoctorToSend(doctor)).toPromise();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}